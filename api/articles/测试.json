{"title":"测试","uid":"ff294b41f6454d72b979d968dd4769d6","slug":"测试","date":"2023-04-25T15:32:24.347Z","updated":"2023-04-25T15:32:24.347Z","comments":true,"path":"api/articles/测试.json","keywords":"前端、微前端、源码、Vue、React、NodeJs","cover":null,"content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>call</code>：改变函数作用域中的 <code>this</code> 指向且立即执行。</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">参数一：&#96;this&#96; 指向的对象\n参数二等：序列。调用函数需要传递的参数列表。\n\n示例：&#96;fn.call(obj, arg1, arg2, ...args)&#96;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>apply</code>：改变函数作用域中的 <code>this</code> 指向且立即执行。</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">参数一：&#96;this&#96; 指向的对象\n参数二：数组。调用函数需要传递的参数。\n\n示例：&#96;fn.apply(obj, [arg1, arg2, ...args])&#96;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>bind</code>：改变函数作用域中的 <code>this</code> 指向，不立即执行，但是会返回一个新的函数</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">参数一：&#96;this&#96; 指向的对象\n参数二：序列。给函数传递的参数序列。\n        如果这个序列的长度小于命名参数的长度，则调用返回的新函数可以补充剩余的未传递的参数\n        如果这个序列的长度等于命名参数的长度，则调用返回的新函数传递的参数无效\n        如果这个序列的长度大于命名参数的长度，则只截取需要的个数，多余的被忽略\n\n示例：&#96;const newFn &#x3D; fn.bind(obj, arg1, arg2);&#96;\n     &#96;newFn(arg3, arg4);&#96;</code></pre>\n\n<h2 id=\"手动实现\"><a href=\"#手动实现\" class=\"headerlink\" title=\"手动实现\"></a>手动实现</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>call</strong></p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myCall &#x3D; function (context) &#123;\n  &#x2F;**\n   * 防止原型对象上的该方法被直接调用\n   * const myCall &#x3D; Function.prototype.myCall;\n   * myCall();\n   * 这是 this &#x3D;&#x3D;&#x3D; window，下面执行 context[fn]() 的时候会报错\n   *&#x2F;\n  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    return undefined;\n  &#125;\n  &#x2F;&#x2F; 如果 context 为 null 或者 undefined，则默认为 window\n  if (context &#x3D;&#x3D;&#x3D; null || context &#x3D;&#x3D;&#x3D; undefined) &#123;\n    context &#x3D; window;\n  &#125; else &#123;\n    &#x2F;&#x2F; 否则就包装成 Object 类型（这里主要是针对原始值做处理）\n    context &#x3D; Object(context);\n  &#125;\n  &#x2F;&#x2F; 这个 context 对象将会作为调用 myCall 方法的函数体内部的 this 指向\n\n  &#x2F;&#x2F; 获取除了第一个以外的所有参数\n  const args &#x3D; [...arguments].slice(1);\n  &#x2F;&#x2F; 定义一个 Symbol 类型的变量\n  const fn &#x3D; Symbol();\n  &#x2F;&#x2F; 让 Symbol 类型的变量作为 context 的 key，值为被执行的函数体\n  &#x2F;&#x2F; (这里的 this 指向的是调用 myCall 方法的函数体，context 代表的是调用该方法的函数体内部的 this)\n  context[fn] &#x3D; this;\n  &#x2F;**\n   * context: &#123;\n   *   props: ...,\n   *   Symbol(): this\n   * &#125;\n   *&#x2F;\n  &#x2F;&#x2F; 执行对象中的方法，因此方法内部的 this 就会指向该对象\n  const result &#x3D; context[fn](...args);\n  &#x2F;&#x2F; 得到结果就在对象中删除该方法，防止污染 context 对象\n  delete context[fn];\n  &#x2F;&#x2F; 返回结果\n  return result;\n&#125;;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>apply</p></blockquote>\n<p><code>apply</code> 和 <code>call</code> 的实现方式很相似。唯一不同的是，前者接收传递给函数的参数是 &#x3D;&#x3D;数组类型&#x3D;&#x3D;，后者接收传递给函数的参数是 &#x3D;&#x3D;序列&#x3D;&#x3D;。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myApply &#x3D; function (context) &#123;\n  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    return undefined;\n  &#125;\n  if (context &#x3D;&#x3D;&#x3D; null || context &#x3D;&#x3D;&#x3D; undefined) &#123;\n    context &#x3D; window;\n  &#125; else &#123;\n    context &#x3D; Object(context);\n  &#125;\n\n  const fn &#x3D; Symbol();\n  context[fn] &#x3D; this;\n  let result;\n  &#x2F;&#x2F; call 和 apply 的区别是除了第一个参数以外的其他参数的传递方式\n  if (arguments[1] instanceof Array) &#123;\n    result &#x3D; context[fn](...arguments[1]); &#x2F;&#x2F; 如果第二个参数是数组，则作为参数传递给函数\n  &#125; else &#123;\n    result &#x3D; context[fn](); &#x2F;&#x2F; 不是数组 什么也不传\n  &#125;\n  delete context[fn];\n  return result;\n&#125;;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bind</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myBind &#x3D; function (context) &#123;\n  &#x2F;**\n   * 这里判断 this 是否为 function 与 myCall 和 myApply 不同的是，\n   * myCall 和 myApply 是立即执行的，当调用错误时返回 undefined 也没问题\n   * 而 myBind 返回的是一个新的函数，因此直接给报错更合理\n   *&#x2F;\n  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    throw new TypeError(&#39;error&#39;);\n  &#125;\n\n  &#x2F;&#x2F; 缓存调用 bind 方法的函数体，以及调用 bind 方法时传递的参数\n  const _this &#x3D; this;\n  const args &#x3D; [...arguments].slice(1);\n\n  &#x2F;&#x2F; bind 方法不是立即执行的，而是会返回一个新的函数\n  return function F() &#123;\n    &#x2F;&#x2F; 如果返回的新的函数是通过 new 调用的，则返回调用 bind 方法的函数体的实例对象\n    if (this instanceof F) &#123;\n      &#x2F;&#x2F; 这里 args 是调用 bind 方法传递给函数体的参数，arguments 是调用返回的新的函数时传递的参数\n      return new _this(...args, ...arguments);\n    &#125; else &#123;\n      &#x2F;&#x2F; 正常调用返回的新的函数，已经缓存了调用方法的函数体，和函数体内部的 this 指向，因此相当于调用 myApply，或者 myCall 方法\n      return _this.myApply(context, [...args, ...arguments]);\n    &#125;\n  &#125;;\n&#125;;</code></pre>\n\n<h2 id=\"无注释版本\"><a href=\"#无注释版本\" class=\"headerlink\" title=\"无注释版本\"></a>无注释版本</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; call\nFunction.prototype.myCall &#x3D; function (context) &#123;\n  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    return undefined;\n  &#125;\n  if (context &#x3D;&#x3D;&#x3D; null || context &#x3D;&#x3D;&#x3D; undefined) &#123;\n    context &#x3D; window;\n  &#125; else &#123;\n    context &#x3D; Object(context);\n  &#125;\n  const args &#x3D; [...arguments].slice(1);\n  const fn &#x3D; Symbol();\n  context[fn] &#x3D; this;\n  const result &#x3D; context[fn](...args);\n  delete context[fn];\n  return result;\n&#125;;\n\n&#x2F;&#x2F; apply\nFunction.prototype.myApply &#x3D; function (context) &#123;\n  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    return undefined;\n  &#125;\n  if (context &#x3D;&#x3D;&#x3D; null || context &#x3D;&#x3D;&#x3D; undefined) &#123;\n    context &#x3D; window;\n  &#125; else &#123;\n    context &#x3D; Object(context);\n  &#125;\n\n  const fn &#x3D; Symbol();\n  context[fn] &#x3D; this;\n  let result;\n  if (arguments[1] instanceof Array) &#123;\n    result &#x3D; context[fn](...arguments[1]);\n  &#125; else &#123;\n    result &#x3D; context[fn]();\n  &#125;\n  delete context[fn];\n  return result;\n&#125;;\n\n&#x2F;&#x2F; bind\nFunction.prototype.myBind &#x3D; function (context) &#123;\n  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;\n    throw new TypeError(&#39;error&#39;);\n  &#125;\n  const _this &#x3D; this;\n  const args &#x3D; [...arguments].slice(1);\n  return function F() &#123;\n    if (this instanceof F) &#123;\n      return new _this(...args, ...arguments);\n    &#125; else &#123;\n      return _this.myApply(context, [...args, ...arguments]);\n    &#125;\n  &#125;;\n&#125;;</code></pre>\n","feature":true,"text":"介绍 call：改变函数作用域中的 this 指向且立即执行。 参数一：&#96;this&#96; 指向的对象 参数二等：序列。调用函数需要传递的参数列表。 示例：&#96;fn.call(obj, arg1, arg2, ...args)&#96; apply：改变函数作用域...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">手动实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E6%B3%A8%E9%87%8A%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">无注释版本</span></a></li></ol>","author":{"name":"Juzzzi","slug":"blog-author","avatar":"https://huyaimg.msstatic.com/avatar/1094/28/ba44a573219dff260387374af68a97_180_135.jpg?1679369771","link":"/","description":"专注于写BUG的非著名前端开发工程师","socials":{"github":"https://github.com/juweinan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/914392310626136","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"如何实现 call、apply、bind？","uid":"581e98227d534136b65e643d2b7dc9ab","slug":"手写call、apply、bind","date":"2023-04-25T15:32:24.347Z","updated":"2023-04-25T15:32:24.347Z","comments":true,"path":"api/articles/手写call、apply、bind.json","keywords":"前端、微前端、源码、Vue、React、NodeJs","cover":null,"text":"介绍 call：改变函数作用域中的 this 指向且立即执行。 参数一：&#96;this&#96; 指向的对象 参数二等：序列。调用函数需要传递的参数列表。 示例：&#96;fn.call(obj, arg1, arg2, ...args)&#96; apply：改变函数作用域...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Juzzzi","slug":"blog-author","avatar":"https://huyaimg.msstatic.com/avatar/1094/28/ba44a573219dff260387374af68a97_180_135.jpg?1679369771","link":"/","description":"专注于写BUG的非著名前端开发工程师","socials":{"github":"https://github.com/juweinan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/914392310626136","customs":{}}},"feature":true}}