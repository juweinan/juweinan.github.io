{"title":"微信小程序实现星巴克类似的底部导航","uid":"bd4cb6da856d09a092e029f0eb2ac7c0","slug":"实现星巴克类似的底部导航","date":"2023-04-25T15:17:42.362Z","updated":"2023-04-25T15:17:42.362Z","comments":true,"path":"api/articles/实现星巴克类似的底部导航.json","keywords":"前端、微前端、源码、Vue、React、NodeJs","cover":[],"content":"<h2 id=\"实现星巴克类似的底部导航\"><a href=\"#实现星巴克类似的底部导航\" class=\"headerlink\" title=\"实现星巴克类似的底部导航\"></a>实现星巴克类似的底部导航</h2><p>实现样式例图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019101616295526.PNG\" alt=\"image\"></p>\n<h4 id=\"自定义导航-custom-footer\"><a href=\"#自定义导航-custom-footer\" class=\"headerlink\" title=\"自定义导航 custom-footer\"></a>自定义导航 custom-footer</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- components&#x2F;custom-footer&#x2F;custom-footer.wxml --&gt;\n&lt;!-- 底部导航栏容器-自定义背景颜色-兼容 iPhoneX 底部横线 --&gt;\n&lt;view\n  class&#x3D;&quot;tabbar_box &#123;&#123;isIphoneX ? &#39;iphoneX-height&#39; : &#39;&#39;&#125;&#125;&quot;\n  style&#x3D;&quot;background: &#123;&#123;tabbar.backgroundColor&#125;&#125;&quot;\n&gt;\n  &lt;block wx:for&#x3D;&quot;&#123;&#123;tabbar.list&#125;&#125;&quot; wx:key&#x3D;&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;&gt;\n    &lt;!-- 凸起的导航按钮 --&gt;\n    &lt;navigator\n      wx:if&#x3D;&quot;&#123;&#123;item.isSpecial&#125;&#125;&quot;\n      style&#x3D;&quot;color: &#123;&#123;tabbar.color&#125;&#125;&quot;\n      class&#x3D;&quot;tabbar_nav&quot;\n      hover-class&#x3D;&quot;none&quot;\n      url&#x3D;&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;\n      data-url&#x3D;&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;\n      open-type&#x3D;&quot;switchTab&quot;\n    &gt;\n      &lt;!-- 针对凸起部分的图片容器进行定位，图片放大 --&gt;\n      &lt;view class&#x3D;&quot;special-wrapper&quot;&gt;\n        &lt;image class&#x3D;&quot;tabbar_icon&quot; src&#x3D;&quot;&#123;&#123;item.iconPath&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;\n      &lt;&#x2F;view&gt;\n      &lt;!-- 占位元素-flex 居中布局，不加占位的话文字会跑到中间 --&gt;\n      &lt;image class&#x3D;&quot;special-text-wrapper&quot;&gt;&lt;&#x2F;image&gt;\n      &lt;text&gt;&#123;&#123;item.text&#125;&#125;&lt;&#x2F;text&gt;\n    &lt;&#x2F;navigator&gt;\n    &lt;!-- 正常的底部导航按钮 --&gt;\n    &lt;navigator\n      wx:else\n      style&#x3D;&quot;color: &#123;&#123;item.selected ? tabbar.selectedColor : tabbar.color&#125;&#125;&quot;\n      class&#x3D;&quot;tabbar_nav&quot;\n      hover-class&#x3D;&quot;none&quot;\n      url&#x3D;&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;\n      open-type&#x3D;&quot;switchTab&quot;\n    &gt;\n      &lt;!-- 根据当前的选中状态展示图片 --&gt;\n      &lt;image\n        class&#x3D;&quot;tabbar_icon&quot;\n        src&#x3D;&quot;&#123;&#123;item.selected ? item.selectedIconPath : item.iconPath&#125;&#125;&quot;\n      &gt;&lt;&#x2F;image&gt;\n      &lt;text&gt;&#123;&#123;item.text&#125;&#125;&lt;&#x2F;text&gt;\n    &lt;&#x2F;navigator&gt;\n  &lt;&#x2F;block&gt;\n&lt;&#x2F;view&gt;</code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">&#x2F;* components&#x2F;custom-footer&#x2F;custom-footer.wxss *&#x2F;\n&#x2F;* 定位在底部以及整体大小布局等 *&#x2F;\n.tabbar_box &#123;\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  z-index: 999;\n  width: 100%;\n  height: 98rpx;\n  display: flex;\n  justify-content: space-around;\n  box-shadow: 0 -12rpx 40rpx -10rpx #ccc;\n&#125;\n\n&#x2F;* 兼容 iPhoneX 横线 *&#x2F;\n.iphoneX-height &#123;\n  padding-bottom: 66rpx;\n&#125;\n\n&#x2F;* 正常的每一个菜单导航按钮选项 *&#x2F;\n.tabbar_nav &#123;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 20rpx;\n  height: 100%;\n  position: relative;\n&#125;\n\n&#x2F;* 导航菜单按钮图标 *&#x2F;\n.tabbar_icon &#123;\n  width: 50rpx;\n  height: 50rpx;\n&#125;\n\n&#x2F;* 特殊导航-凸起的样式-定位+圆角+边框 *&#x2F;\n.special-wrapper &#123;\n  position: absolute;\n  top: -52rpx;\n  width: 113rpx;\n  height: 113rpx;\n  border-radius: 50%;\n  background: #fff;\n  text-align: center;\n  box-sizing: border-box;\n  padding: 6rpx;\n  box-shadow: 0 -12rpx 40rpx -10rpx #ccc;\n&#125;\n\n&#x2F;* 凸起的图片大小重新设置 *&#x2F;\n.special-wrapper .tabbar_icon &#123;\n  width: 88rpx;\n  height: 88rpx;\n  padding-top: 7rpx;\n&#125;\n\n&#x2F;* 占位-防止凸起样式的文字跑到上面 *&#x2F;\n.special-text-wrapper &#123;\n  width: 56rpx;\n  height: 56rpx;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; components&#x2F;custom-footer&#x2F;custom-footer.js\nComponent(&#123;\n  &#x2F;**\n   * 组件的属性列表\n   *&#x2F;\n  properties: &#123;\n    tabbar: Object,\n  &#125;,\n&#125;);</code></pre>\n\n<p>在编写完上面的代码后，自定义组件的结构样式已经完成了。下面就是改如何使用了，不过在使用之前需要注意一下几点</p>\n<h4 id=\"在-app-json-中配置小程序自带的导航\"><a href=\"#在-app-json-中配置小程序自带的导航\" class=\"headerlink\" title=\"在 app.json 中配置小程序自带的导航\"></a>在 app.json 中配置小程序自带的导航</h4><p>配置默认的导航需要遵循小程序的规则：</p>\n<ul>\n<li>菜单项不能少于两项</li>\n<li><code>pagePath</code> 中必须和 <code>pages</code> 中的保持一致</li>\n</ul>\n<p>这里只做了简单配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n  &quot;pages&quot;: [\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;,\n    &quot;pages&#x2F;page1&#x2F;page1&quot;,\n    &quot;pages&#x2F;page2&#x2F;page2&quot;,\n    &quot;pages&#x2F;page3&#x2F;page3&quot;\n  ],\n  &quot;tabBar&quot;: &#123;\n    &quot;list&quot;: [\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,\n        &quot;text&quot;: &quot;首页&quot;\n      &#125;,\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;logs&#x2F;logs&quot;,\n        &quot;text&quot;: &quot;日志&quot;\n      &#125;,\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;page1&#x2F;page1&quot;,\n        &quot;text&quot;: &quot;页面1&quot;\n      &#125;,\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;page2&#x2F;page2&quot;,\n        &quot;text&quot;: &quot;页面2&quot;\n      &#125;,\n      &#123;\n        &quot;pagePath&quot;: &quot;pages&#x2F;page3&#x2F;page3&quot;,\n        &quot;text&quot;: &quot;页面3&quot;\n      &#125;\n    ]\n  &#125;,\n&#125;</code></pre>\n\n<h5 id=\"问：我们要使用自定义导航，为什么还要配置默认导航呢？\"><a href=\"#问：我们要使用自定义导航，为什么还要配置默认导航呢？\" class=\"headerlink\" title=\"问：我们要使用自定义导航，为什么还要配置默认导航呢？\"></a>问：我们要使用自定义导航，为什么还要配置默认导航呢？</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>个人理解是因为自定义导航是在默认导航的基础上完成的，而且 tabbar 导航是不进入路由栈的。而且实践证明，如果这里面配置的路由和自定义路由的数量和路由不一致，会导致无法跳转页面。因此这不是必须要做的。</p></blockquote>\n<p>做完这些工作后，页面中应该是会出现自定义底部导航栏的。</p>\n<h4 id=\"使用自定义导航\"><a href=\"#使用自定义导航\" class=\"headerlink\" title=\"使用自定义导航\"></a>使用自定义导航</h4><ul>\n<li>在每一个需要展示自定义导航的页面引用导航组件。这些页面通常是底部导航跳转路由对应的页面。</li>\n<li>在每个页面中都执行 <code>app.editTabbar()</code>。原因后面讲，少安毋躁。</li>\n</ul>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--pages&#x2F;index&#x2F;index.wxml--&gt;\n&lt;custom-footer tabbar&#x3D;&quot;&#123;&#123;tabbar&#125;&#125;&quot;&gt;&lt;&#x2F;custom-footer&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; pages&#x2F;index&#x2F;index.js\nconst app &#x3D; getApp();\nPage(&#123;\n  &#x2F;**\n   * 生命周期函数--监听页面加载\n   *&#x2F;\n  onLoad: function (options) &#123;\n    app.editTabbar();\n  &#125;,\n&#125;);</code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;usingComponents&quot;: &#123;\n    &quot;custom-footer&quot;: &quot;&#x2F;components&#x2F;custom-footer&#x2F;custom-footer&quot;\n  &#125;\n&#125;</code></pre>\n\n<p>这时页面中可能会展示自定义导航栏，但是只能看还不能用。。。</p>\n<h4 id=\"让自定义导航栏代替默认导航\"><a href=\"#让自定义导航栏代替默认导航\" class=\"headerlink\" title=\"让自定义导航栏代替默认导航\"></a>让自定义导航栏代替默认导航</h4><ul>\n<li>自定义导航中的 <code>pagePath</code> 必须和 <code>app.json</code> 中配置的 <code>pagePath</code> 保持一致</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; app.js\nApp(&#123;\n  onLaunch() &#123;\n    this.getHeaderInfo();\n  &#125;,\n  globalData: &#123;\n    &#x2F;&#x2F; 导航相关的数据，具体属性不详细介绍\n    tabBar: &#123;\n      backgroundColor: &#39;#ffffff&#39;,\n      color: &#39;#333333&#39;,\n      selectedColor: &#39;#26C55E&#39;,\n      &#x2F;&#x2F; 这里的路由必须和 app.json 中配置的路径一样\n      list: [\n        &#123;\n          pagePath: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;,\n          text: &#39;首页&#39;,\n          iconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n          selectedIconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n        &#125;,\n        &#123;\n          pagePath: &#39;&#x2F;pages&#x2F;logs&#x2F;logs&#39;,\n          text: &#39;日志&#39;,\n          iconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n          selectedIconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n        &#125;,\n        &#123;\n          pagePath: &#39;&#x2F;pages&#x2F;page1&#x2F;page1&#39;,\n          isSpecial: true, &#x2F;&#x2F; 特殊的导航，在这里值得是当前导航是凸起的部分\n          text: &#39;页面1&#39;,\n          iconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n          selectedIconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n        &#125;,\n        &#123;\n          pagePath: &#39;&#x2F;pages&#x2F;page2&#x2F;page2&#39;,\n          text: &#39;页面2&#39;,\n          iconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n          selectedIconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n        &#125;,\n        &#123;\n          pagePath: &#39;&#x2F;pages&#x2F;page3&#x2F;page3&#39;,\n          text: &#39;页面3&#39;,\n          iconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n          selectedIconPath: &#39;&#x2F;assets&#x2F;images&#x2F;preview.png&#39;,\n        &#125;,\n      ],\n    &#125;,\n  &#125;,\n\n  &#x2F;&#x2F; 编辑导航方法\n  editTabbar() &#123;\n    &#x2F;&#x2F;隐藏系统tabbar\n    wx.hideTabBar();\n    let tabbar &#x3D; this.globalData.tabBar;\n    let currentPages &#x3D; getCurrentPages();\n    &#x2F;&#x2F; 拿到当前页面。这里面的 _this 对应的就是当前页面的引用\n    let _this &#x3D; currentPages[currentPages.length - 1];\n    &#x2F;&#x2F; 取出当前页面的路由\n    let pagePath &#x3D; _this.route;\n    &#x2F;&#x2F; 让路由第一个字符是 &#x2F;\n    pagePath.indexOf(&#39;&#x2F;&#39;) !&#x3D; 0 &amp;&amp; (pagePath &#x3D; &#39;&#x2F;&#39; + pagePath);\n    &#x2F;&#x2F; 遍历数组，先让所有的都是非选中状态，只有当前路由对应的是选中的\n    for (let i in tabbar.list) &#123;\n      tabbar.list[i].selected &#x3D; false;\n      tabbar.list[i].pagePath &#x3D;&#x3D; pagePath &amp;&amp; (tabbar.list[i].selected &#x3D; true);\n    &#125;\n    _this.setData(&#123; tabbar &#125;); &#x2F;&#x2F; 修改当前选中的页面的 tabbar 数据\n  &#125;,\n&#125;);</code></pre>\n\n<p>也就是说，在每个使用自定义导航的页面中必须先隐藏系统默认的导航。而且这里面 <code>setData</code> 也是修改的选中页面的数据，这也是为什么页面中使用组件时为什么可以传递 <code>tabbar</code> 参数的原因。</p>\n<p>经过这些处理，自定义导航就可以使用了，至于样式颜色图标等就根据业务自定义就好了。</p>\n","feature":true,"text":"实现星巴克类似的底部导航实现样式例图 自定义导航 custom-footer&lt;!-- components&#x2F;custom-footer&#x2F;custom-footer.wxml --&gt; &lt;!-- 底部导航栏容器-自定义背景颜色-兼容 iPhone...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%98%9F%E5%B7%B4%E5%85%8B%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">实现星巴克类似的底部导航</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA-custom-footer\"><span class=\"toc-text\">自定义导航 custom-footer</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8-app-json-%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%B8%A6%E7%9A%84%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">在 app.json 中配置小程序自带的导航</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%97%AE%EF%BC%9A%E6%88%91%E4%BB%AC%E8%A6%81%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%AF%BC%E8%88%AA%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">问：我们要使用自定义导航，为什么还要配置默认导航呢？</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">使用自定义导航</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%BB%A3%E6%9B%BF%E9%BB%98%E8%AE%A4%E5%AF%BC%E8%88%AA\"><span class=\"toc-text\">让自定义导航栏代替默认导航</span></a></li></ol></li></ol></li></ol>","author":{"name":"Juzzzi","slug":"blog-author","avatar":"https://huyaimg.msstatic.com/avatar/1094/28/ba44a573219dff260387374af68a97_180_135.jpg?1679369771","link":"/","description":"专注于写BUG的非著名前端开发工程师","socials":{"github":"https://github.com/juweinan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/914392310626136","customs":{}}},"mapped":true,"prev_post":{"title":"如何实现 call、apply、bind？","uid":"581e98227d534136b65e643d2b7dc9ab","slug":"手写call、apply、bind","date":"2023-04-25T15:17:42.362Z","updated":"2023-04-25T15:17:42.362Z","comments":true,"path":"api/articles/手写call、apply、bind.json","keywords":"前端、微前端、源码、Vue、React、NodeJs","cover":null,"text":"介绍 call：改变函数作用域中的 this 指向且立即执行。 参数一：&#96;this&#96; 指向的对象 参数二等：序列。调用函数需要传递的参数列表。 示例：&#96;fn.call(obj, arg1, arg2, ...args)&#96; apply：改变函数作用域...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Juzzzi","slug":"blog-author","avatar":"https://huyaimg.msstatic.com/avatar/1094/28/ba44a573219dff260387374af68a97_180_135.jpg?1679369771","link":"/","description":"专注于写BUG的非著名前端开发工程师","socials":{"github":"https://github.com/juweinan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/914392310626136","customs":{}}},"feature":true},"next_post":{}}