<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微信小程序实现星巴克类似的底部导航</title>
    <link href="/post/%E5%AE%9E%E7%8E%B0%E6%98%9F%E5%B7%B4%E5%85%8B%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA.html"/>
    <url>/post/%E5%AE%9E%E7%8E%B0%E6%98%9F%E5%B7%B4%E5%85%8B%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA.html</url>
    
    <content type="html"><![CDATA[<h2 id="实现星巴克类似的底部导航"><a href="#实现星巴克类似的底部导航" class="headerlink" title="实现星巴克类似的底部导航"></a>实现星巴克类似的底部导航</h2><p>实现样式例图</p><p><img src="https://img-blog.csdnimg.cn/2019101616295526.PNG" alt="image"></p><h4 id="自定义导航-custom-footer"><a href="#自定义导航-custom-footer" class="headerlink" title="自定义导航 custom-footer"></a>自定义导航 custom-footer</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- components/custom-footer/custom-footer.wxml --&gt;</span><br><span class="hljs-comment">&lt;!-- 底部导航栏容器-自定义背景颜色-兼容 iPhoneX 底部横线 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabbar_box &#123;&#123;isIphoneX ? &#x27;iphoneX-height&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: &#123;&#123;tabbar.backgroundColor&#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;tabbar.list&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 凸起的导航按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;item.isSpecial&#125;&#125;&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#123;&#123;tabbar.color&#125;&#125;&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabbar_nav&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">hover-class</span>=<span class="hljs-string">&quot;none&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">data-url</span>=<span class="hljs-string">&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;switchTab&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      <span class="hljs-comment">&lt;!-- 针对凸起部分的图片容器进行定位，图片放大 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;special-wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabbar_icon&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;item.iconPath&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 占位元素-flex 居中布局，不加占位的话文字会跑到中间 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;special-text-wrapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 正常的底部导航按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">wx:else</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: &#123;&#123;item.selected ? tabbar.selectedColor : tabbar.color&#125;&#125;&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabbar_nav&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">hover-class</span>=<span class="hljs-string">&quot;none&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;&#123;&#123;item.pagePath&#125;&#125;&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;switchTab&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      <span class="hljs-comment">&lt;!-- 根据当前的选中状态展示图片 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabbar_icon&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;item.selected ? item.selectedIconPath : item.iconPath&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* components/custom-footer/custom-footer.wxss */</span><br><span class="hljs-comment">/* 定位在底部以及整体大小布局等 */</span><br><span class="hljs-selector-class">.tabbar_box</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">98</span>rpx;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-around;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> -<span class="hljs-number">12</span>rpx <span class="hljs-number">40</span>rpx -<span class="hljs-number">10</span>rpx <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-comment">/* 兼容 iPhoneX 横线 */</span><br><span class="hljs-selector-class">.iphoneX-height</span> &#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">66</span>rpx;<br>&#125;<br><br><span class="hljs-comment">/* 正常的每一个菜单导航按钮选项 */</span><br><span class="hljs-selector-class">.tabbar_nav</span> &#123;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-comment">/* 导航菜单按钮图标 */</span><br><span class="hljs-selector-class">.tabbar_icon</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">50</span>rpx;<br>&#125;<br><br><span class="hljs-comment">/* 特殊导航-凸起的样式-定位+圆角+边框 */</span><br><span class="hljs-selector-class">.special-wrapper</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">52</span>rpx;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">113</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">113</span>rpx;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">6</span>rpx;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> -<span class="hljs-number">12</span>rpx <span class="hljs-number">40</span>rpx -<span class="hljs-number">10</span>rpx <span class="hljs-number">#ccc</span>;<br>&#125;<br><br><span class="hljs-comment">/* 凸起的图片大小重新设置 */</span><br><span class="hljs-selector-class">.special-wrapper</span> <span class="hljs-selector-class">.tabbar_icon</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">88</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">88</span>rpx;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">7</span>rpx;<br>&#125;<br><br><span class="hljs-comment">/* 占位-防止凸起样式的文字跑到上面 */</span><br><span class="hljs-selector-class">.special-text-wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">56</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">56</span>rpx;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/custom-footer/custom-footer.js</span><br><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 组件的属性列表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">properties</span>: &#123;<br>    <span class="hljs-attr">tabbar</span>: <span class="hljs-title class_">Object</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在编写完上面的代码后，自定义组件的结构样式已经完成了。下面就是改如何使用了，不过在使用之前需要注意一下几点</p><h4 id="在-app-json-中配置小程序自带的导航"><a href="#在-app-json-中配置小程序自带的导航" class="headerlink" title="在 app.json 中配置小程序自带的导航"></a>在 app.json 中配置小程序自带的导航</h4><p>配置默认的导航需要遵循小程序的规则：</p><ul><li>菜单项不能少于两项</li><li><code>pagePath</code> 中必须和 <code>pages</code> 中的保持一致</li></ul><p>这里只做了简单配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;pages&quot;</span>: [<br>    <span class="hljs-string">&quot;pages/index/index&quot;</span>,<br>    <span class="hljs-string">&quot;pages/logs/logs&quot;</span>,<br>    <span class="hljs-string">&quot;pages/page1/page1&quot;</span>,<br>    <span class="hljs-string">&quot;pages/page2/page2&quot;</span>,<br>    <span class="hljs-string">&quot;pages/page3/page3&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;tabBar&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;list&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/index/index&quot;</span>,<br>        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;首页&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/logs/logs&quot;</span>,<br>        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;日志&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/page1/page1&quot;</span>,<br>        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;页面1&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/page2/page2&quot;</span>,<br>        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;页面2&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/page3/page3&quot;</span>,<br>        <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;页面3&quot;</span><br>      &#125;<br>    ]<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="问：我们要使用自定义导航，为什么还要配置默认导航呢？"><a href="#问：我们要使用自定义导航，为什么还要配置默认导航呢？" class="headerlink" title="问：我们要使用自定义导航，为什么还要配置默认导航呢？"></a>问：我们要使用自定义导航，为什么还要配置默认导航呢？</h5><blockquote><p>个人理解是因为自定义导航是在默认导航的基础上完成的，而且 tabbar 导航是不进入路由栈的。而且实践证明，如果这里面配置的路由和自定义路由的数量和路由不一致，会导致无法跳转页面。因此这不是必须要做的。</p></blockquote><p>做完这些工作后，页面中应该是会出现自定义底部导航栏的。</p><h4 id="使用自定义导航"><a href="#使用自定义导航" class="headerlink" title="使用自定义导航"></a>使用自定义导航</h4><ul><li>在每一个需要展示自定义导航的页面引用导航组件。这些页面通常是底部导航跳转路由对应的页面。</li><li>在每个页面中都执行 <code>app.editTabbar()</code>。原因后面讲，少安毋躁。</li></ul><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/index/index.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">custom-footer</span> <span class="hljs-attr">tabbar</span>=<span class="hljs-string">&quot;&#123;&#123;tabbar&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-footer</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pages/index/index.js</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>()<br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    app.<span class="hljs-title function_">editTabbar</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;custom-footer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/components/custom-footer/custom-footer&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这时页面中可能会展示自定义导航栏，但是只能看还不能用。。。</p><h4 id="让自定义导航栏代替默认导航"><a href="#让自定义导航栏代替默认导航" class="headerlink" title="让自定义导航栏代替默认导航"></a>让自定义导航栏代替默认导航</h4><ul><li>自定义导航中的 <code>pagePath</code> 必须和 <code>app.json</code> 中配置的 <code>pagePath</code> 保持一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app.js</span><br><span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-title function_">onLaunch</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getHeaderInfo</span>()<br>  &#125;,<br>  <span class="hljs-attr">globalData</span>: &#123;<br>    <span class="hljs-comment">// 导航相关的数据，具体属性不详细介绍</span><br>    <span class="hljs-attr">tabBar</span>: &#123;<br>      <span class="hljs-string">&quot;backgroundColor&quot;</span>: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br>      <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#333333&quot;</span>,<br>      <span class="hljs-string">&quot;selectedColor&quot;</span>: <span class="hljs-string">&quot;#26C55E&quot;</span>,<br>      <span class="hljs-comment">// 这里的路由必须和 app.json 中配置的路径一样</span><br>      <span class="hljs-string">&quot;list&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;/pages/index/index&quot;</span>,<br>          <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;首页&quot;</span>,<br>          <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span>,<br>          <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;/pages/logs/logs&quot;</span>,<br>          <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;日志&quot;</span>,<br>          <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span>,<br>          <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;/pages/page1/page1&quot;</span>,<br>          <span class="hljs-string">&quot;isSpecial&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 特殊的导航，在这里值得是当前导航是凸起的部分</span><br>          <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;页面1&quot;</span>,<br>          <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span>,<br>          <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;/pages/page2/page2&quot;</span>,<br>          <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;页面2&quot;</span>,<br>          <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span>,<br>          <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;/pages/page3/page3&quot;</span>,<br>          <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;页面3&quot;</span>,<br>          <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span>,<br>          <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/assets/images/preview.png&quot;</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// 编辑导航方法</span><br>  editTabbar () &#123;<br>    <span class="hljs-comment">//隐藏系统tabbar</span><br>    wx.<span class="hljs-title function_">hideTabBar</span>()<br>    <span class="hljs-keyword">let</span> tabbar = <span class="hljs-variable language_">this</span>.<span class="hljs-property">globalData</span>.<span class="hljs-property">tabBar</span>;<br>    <span class="hljs-keyword">let</span> currentPages = <span class="hljs-title function_">getCurrentPages</span>();<br>    <span class="hljs-comment">// 拿到当前页面。这里面的 _this 对应的就是当前页面的引用</span><br>    <span class="hljs-keyword">let</span> _this = currentPages[currentPages.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 取出当前页面的路由</span><br>    <span class="hljs-keyword">let</span> pagePath = _this.<span class="hljs-property">route</span>;<br>    <span class="hljs-comment">// 让路由第一个字符是 /</span><br>    (pagePath.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) != <span class="hljs-number">0</span>) &amp;&amp; (pagePath = <span class="hljs-string">&#x27;/&#x27;</span> + pagePath);<br>    <span class="hljs-comment">// 遍历数组，先让所有的都是非选中状态，只有当前路由对应的是选中的</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> tabbar.<span class="hljs-property">list</span>) &#123;<br>      tabbar.<span class="hljs-property">list</span>[i].<span class="hljs-property">selected</span> = <span class="hljs-literal">false</span>;<br>      (tabbar.<span class="hljs-property">list</span>[i].<span class="hljs-property">pagePath</span> == pagePath) &amp;&amp; (tabbar.<span class="hljs-property">list</span>[i].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>);<br>    &#125;<br>    _this.<span class="hljs-title function_">setData</span>(&#123; tabbar &#125;); <span class="hljs-comment">// 修改当前选中的页面的 tabbar 数据</span><br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>也就是说，在每个使用自定义导航的页面中必须先隐藏系统默认的导航。而且这里面 <code>setData</code> 也是修改的选中页面的数据，这也是为什么页面中使用组件时为什么可以传递 <code>tabbar</code> 参数的原因。</p><p>经过这些处理，自定义导航就可以使用了，至于样式颜色图标等就根据业务自定义就好了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何实现 call、apply、bind？</title>
    <link href="/post/%E6%89%8B%E5%86%99call%E3%80%81apply%E3%80%81bind.html"/>
    <url>/post/%E6%89%8B%E5%86%99call%E3%80%81apply%E3%80%81bind.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><code>call</code>：改变函数作用域中的 <code>this</code> 指向且立即执行。</p></blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">参数一：`this` 指向的对象<br>参数二等：序列。调用函数需要传递的参数列表。 <br><br>示例：`fn.call(obj, arg1, arg2, ...args)`<br></code></pre></td></tr></table></figure><blockquote><p><code>apply</code>：改变函数作用域中的 <code>this</code> 指向且立即执行。</p></blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">参数一：`this` 指向的对象<br>参数二：数组。调用函数需要传递的参数。 <br><br>示例：`fn.apply(obj, [arg1, arg2, ...args])`<br></code></pre></td></tr></table></figure><blockquote><p><code>bind</code>：改变函数作用域中的 <code>this</code> 指向，不立即执行，但是会返回一个新的函数</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe">参数一：`<span class="hljs-built_in">this</span>` 指向的对象<br>参数二：序列。给函数传递的参数序列。<br>        如果这个序列的长度小于命名参数的长度，则调用返回的新函数可以补充剩余的未传递的参数<br>        如果这个序列的长度等于命名参数的长度，则调用返回的新函数传递的参数无效<br>        如果这个序列的长度大于命名参数的长度，则只截取需要的个数，多余的被忽略<br>    <br>示例：`const <span class="hljs-keyword">new</span><span class="hljs-type">Fn</span> = fn.bind(obj, arg1, arg2);`<br>     `<span class="hljs-keyword">new</span><span class="hljs-type">Fn</span>(arg3, arg4);`<br></code></pre></td></tr></table></figure><h2 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h2><blockquote><p><strong>call</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * 防止原型对象上的该方法被直接调用</span><br><span class="hljs-comment">   * const myCall = Function.prototype.myCall;</span><br><span class="hljs-comment">   * myCall();</span><br><span class="hljs-comment">   * 这是 this === window，下面执行 context[fn]() 的时候会报错</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-comment">// 如果 context 为 null 或者 undefined，则默认为 window</span><br>  <span class="hljs-keyword">if</span> (context === <span class="hljs-literal">null</span> || context === <span class="hljs-literal">undefined</span>) &#123;<br>    context = <span class="hljs-variable language_">window</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 否则就包装成 Object 类型（这里主要是针对原始值做处理）</span><br>    context = <span class="hljs-title class_">Object</span>(context);<br>  &#125; <br>  <span class="hljs-comment">// 这个 context 对象将会作为调用 myCall 方法的函数体内部的 this 指向</span><br><br>  <span class="hljs-comment">// 获取除了第一个以外的所有参数</span><br>  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 定义一个 Symbol 类型的变量</span><br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>();<br>  <span class="hljs-comment">// 让 Symbol 类型的变量作为 context 的 key，值为被执行的函数体 </span><br>  <span class="hljs-comment">// (这里的 this 指向的是调用 myCall 方法的函数体，context 代表的是调用该方法的函数体内部的 this)</span><br>  context[fn] = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * context: &#123;</span><br><span class="hljs-comment">   *   props: ...,</span><br><span class="hljs-comment">   *   Symbol(): this</span><br><span class="hljs-comment">   * &#125;</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">// 执行对象中的方法，因此方法内部的 this 就会指向该对象</span><br>  <span class="hljs-keyword">const</span> result = context[fn](...args);<br>  <span class="hljs-comment">// 得到结果就在对象中删除该方法，防止污染 context 对象</span><br>  <span class="hljs-keyword">delete</span> context[fn];<br>  <span class="hljs-comment">// 返回结果</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>apply</p></blockquote><p><code>apply</code> 和 <code>call</code> 的实现方式很相似。唯一不同的是，前者接收传递给函数的参数是 &#x3D;&#x3D;数组类型&#x3D;&#x3D;，后者接收传递给函数的参数是 &#x3D;&#x3D;序列&#x3D;&#x3D;。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (context === <span class="hljs-literal">null</span> || context === <span class="hljs-literal">undefined</span>) &#123;<br>    context = <span class="hljs-variable language_">window</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    context = <span class="hljs-title class_">Object</span>(context);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>();<br>  context[fn] = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">let</span> result;<br>  <span class="hljs-comment">// call 和 apply 的区别是除了第一个参数以外的其他参数的传递方式</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>    result = context[fn](...<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 如果第二个参数是数组，则作为参数传递给函数</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    result = context[fn](); <span class="hljs-comment">// 不是数组 什么也不传</span><br>  &#125;<br>  <span class="hljs-keyword">delete</span> context[fn];<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>bind</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * 这里判断 this 是否为 function 与 myCall 和 myApply 不同的是，</span><br><span class="hljs-comment">   * myCall 和 myApply 是立即执行的，当调用错误时返回 undefined 也没问题</span><br><span class="hljs-comment">   * 而 myBind 返回的是一个新的函数，因此直接给报错更合理</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 缓存调用 bind 方法的函数体，以及调用 bind 方法时传递的参数</span><br>  <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-comment">// bind 方法不是立即执行的，而是会返回一个新的函数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 如果返回的新的函数是通过 new 调用的，则返回调用 bind 方法的函数体的实例对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> F) &#123;<br>      <span class="hljs-comment">// 这里 args 是调用 bind 方法传递给函数体的参数，arguments 是调用返回的新的函数时传递的参数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">_this</span>(...args, ...<span class="hljs-variable language_">arguments</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 正常调用返回的新的函数，已经缓存了调用方法的函数体，和函数体内部的 this 指向，因此相当于调用 myApply，或者 myCall 方法</span><br>      <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">myApply</span>(context, [...args, ...<span class="hljs-variable language_">arguments</span>]);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无注释版本"><a href="#无注释版本" class="headerlink" title="无注释版本"></a>无注释版本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// call</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (context === <span class="hljs-literal">null</span> || context === <span class="hljs-literal">undefined</span>) &#123;<br>    context = <span class="hljs-variable language_">window</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    context = <span class="hljs-title class_">Object</span>(context);<br>  &#125;<br>  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>();<br>  context[fn] = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> result = context[fn](...args);<br>  <span class="hljs-keyword">delete</span> context[fn];<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// apply</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (context === <span class="hljs-literal">null</span> || context === <span class="hljs-literal">undefined</span>) &#123;<br>    context = <span class="hljs-variable language_">window</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    context = <span class="hljs-title class_">Object</span>(context);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>();<br>  context[fn] = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">let</span> result;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>    result = context[fn](...<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    result = context[fn]();<br>  &#125;<br>  <span class="hljs-keyword">delete</span> context[fn];<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// bind</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> F) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">_this</span>(...args, ...<span class="hljs-variable language_">arguments</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> _this.<span class="hljs-title function_">myApply</span>(context, [...args, ...<span class="hljs-variable language_">arguments</span>]);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
